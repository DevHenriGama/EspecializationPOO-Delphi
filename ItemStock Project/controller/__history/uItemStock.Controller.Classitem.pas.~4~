unit uItemStock.Controller.Classitem;

interface

uses uItemStock.Controller.Interfaces, uItemStock.Model.Interfaces,
  uItemStock.Model.ClassStock;

  type
    TControllerItem = class(TInterfacedObject, IControllerItem)

      private
         FID : Integer;
         FItem : String;
         FState : String;
         FDescription : String;
         FPicturePath : String;
         FContainer : Integer;
         FStockItem : IStockItem;
      public
        constructor Create;
        destructor Destroy;override;
        class function New : IControllerItem;
          function ID( IDvalue : Integer) : IControllerItem;
          function Item( ItemName : String) : IControllerItem;
          function State(ItemState : String) : IControllerItem;
          function Description(Des_Item : String) : IControllerItem;
          function PicturePath( Path : String) : IControllerItem;
          function Container( NumContainer : Integer) : IControllerItem;
          procedure Insert;
    end;

implementation

{ TControllerItem }

function TControllerItem.Container(NumContainer: Integer): IControllerItem;
begin
  Result := Self;
  FContainer := NumContainer;
end;

constructor TControllerItem.Create;
begin
 FStockItem := TStockItem.Create;
end;

function TControllerItem.Description(Des_Item: String): IControllerItem;
begin
   Result := Self;
   FDescription := Des_Item;
end;

destructor TControllerItem.Destroy;
begin

  inherited;
end;

function TControllerItem.ID(IDvalue: Integer): IControllerItem;
begin
 Result := Self;
 FID := IDvalue;
end;

procedure TControllerItem.Insert;
begin

end;

function TControllerItem.Item(ItemName: String): IControllerItem;
begin
 Result := Self;
 FItem := ItemName;
end;

class function TControllerItem.New: IControllerItem;
begin
Result := Self.Create;
end;

function TControllerItem.PicturePath(Path: String): IControllerItem;
begin
Result := Self;
FPicturePath := Path;
end;

function TControllerItem.State(ItemState: String): IControllerItem;
begin
Result := Self;
FState := ItemState;
end;

end.
